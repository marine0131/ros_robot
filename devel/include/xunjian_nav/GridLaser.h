// Generated by gencpp from file xunjian_nav/GridLaser.msg
// DO NOT EDIT!


#ifndef XUNJIAN_NAV_MESSAGE_GRIDLASER_H
#define XUNJIAN_NAV_MESSAGE_GRIDLASER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <xunjian_nav/GridPoint.h>

namespace xunjian_nav
{
template <class ContainerAllocator>
struct GridLaser_
{
  typedef GridLaser_<ContainerAllocator> Type;

  GridLaser_()
    : gridPnt()
    , mapGridWidth(0)
    , mapGridHeight(0)  {
    }
  GridLaser_(const ContainerAllocator& _alloc)
    : gridPnt(_alloc)
    , mapGridWidth(0)
    , mapGridHeight(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::xunjian_nav::GridPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::xunjian_nav::GridPoint_<ContainerAllocator> >::other >  _gridPnt_type;
  _gridPnt_type gridPnt;

   typedef int32_t _mapGridWidth_type;
  _mapGridWidth_type mapGridWidth;

   typedef int32_t _mapGridHeight_type;
  _mapGridHeight_type mapGridHeight;




  typedef boost::shared_ptr< ::xunjian_nav::GridLaser_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xunjian_nav::GridLaser_<ContainerAllocator> const> ConstPtr;

}; // struct GridLaser_

typedef ::xunjian_nav::GridLaser_<std::allocator<void> > GridLaser;

typedef boost::shared_ptr< ::xunjian_nav::GridLaser > GridLaserPtr;
typedef boost::shared_ptr< ::xunjian_nav::GridLaser const> GridLaserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xunjian_nav::GridLaser_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xunjian_nav::GridLaser_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xunjian_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'xunjian_nav': ['/home/robot/ros/src/xunjian_nav/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xunjian_nav::GridLaser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xunjian_nav::GridLaser_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xunjian_nav::GridLaser_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xunjian_nav::GridLaser_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xunjian_nav::GridLaser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xunjian_nav::GridLaser_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xunjian_nav::GridLaser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e45ff288b41dffb248ecb1dbf9881bc";
  }

  static const char* value(const ::xunjian_nav::GridLaser_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e45ff288b41dffbULL;
  static const uint64_t static_value2 = 0x248ecb1dbf9881bcULL;
};

template<class ContainerAllocator>
struct DataType< ::xunjian_nav::GridLaser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xunjian_nav/GridLaser";
  }

  static const char* value(const ::xunjian_nav::GridLaser_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xunjian_nav::GridLaser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GridPoint[] gridPnt\n\
int32 mapGridWidth\n\
int32 mapGridHeight\n\
\n\
================================================================================\n\
MSG: xunjian_nav/GridPoint\n\
int32 x\n\
int32 y\n\
";
  }

  static const char* value(const ::xunjian_nav::GridLaser_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xunjian_nav::GridLaser_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gridPnt);
      stream.next(m.mapGridWidth);
      stream.next(m.mapGridHeight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GridLaser_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xunjian_nav::GridLaser_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xunjian_nav::GridLaser_<ContainerAllocator>& v)
  {
    s << indent << "gridPnt[]" << std::endl;
    for (size_t i = 0; i < v.gridPnt.size(); ++i)
    {
      s << indent << "  gridPnt[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::xunjian_nav::GridPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.gridPnt[i]);
    }
    s << indent << "mapGridWidth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mapGridWidth);
    s << indent << "mapGridHeight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mapGridHeight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XUNJIAN_NAV_MESSAGE_GRIDLASER_H
